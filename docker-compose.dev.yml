services:
  postgres:
    image: postgres:17
    container_name: carekobooks-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: carekobooks
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - carekobooks-postgres-data:/var/lib/postgresql/data
    command: ["postgres", "-c", "max_prepared_transactions=100"]
    restart: unless-stopped
    networks:
      - carekonet-keycloak-app-postgres

  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    container_name: carekobooks-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://localhost:9000/minio/health/live; }
        minio server /data --quiet & echo $! > /tmp/minio.pid
        until isAlive; do sleep 1; done
        echo "MinIO is ready. Proceeding with setup..."
        mc alias set myminio http://localhost:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
        mc mb myminio/${MINIO_BUCKET} --ignore-existing
        mc anonymous set public myminio/${MINIO_BUCKET}
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid
        while isAlive; do sleep 0.1; done
        exec minio server /data
      '
    command: server /data --console-address ":9001"
    volumes:
      - carekobooks-minio-data:/data
    restart: unless-stopped

  redis:
    image: redis:8
    container_name: carekobooks-redis
    ports:
      - "6379:6379"
    volumes:
      - carekobooks-redis-data:/data
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.5
    container_name: carekobooks-keycloak
    depends_on:
      postgres:
        condition: service_started
      keycloak-postgres:
        condition: service_started
      keycloak-realm-setup:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/carekobooks-keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_FEATURES: update-email
    command: start-dev --import-realm
    volumes:
      - carekobooks-keycloak-realm-data:/opt/keycloak/data/import
      - ./docker/keycloak/conf:/opt/keycloak/conf
      - ./docker/keycloak/providers:/opt/keycloak/providers
      - ./docker/keycloak/themes/ekosutrisno/theme/potluck.warzone:/opt/keycloak/themes/ekosutrisno
    networks:
      - carekonet-keycloak-postgres
      - carekonet-keycloak-app-postgres

  keycloak-realm-setup:
    build:
      context: ./docker/dropbox
      dockerfile: Dockerfile
    container_name: keycloak-realm-setup
    environment:
      DROPBOX_ACCESS_TOKEN: ${DROPBOX_ACCESS_TOKEN}
    entrypoint: >
      /bin/sh -c '
        set -e
        if [ ! -f "/app/data/carekobooks-realm.json" ]; then
          python main.py
        fi
      '
    volumes:
      - carekobooks-keycloak-realm-data:/app/data
    restart: no

  keycloak-postgres:
    image: postgres:17
    container_name: carekobooks-keycloak-postgres
    environment:
      POSTGRES_DB: carekobooks-keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - carekobooks-keycloak-postgres-data:/var/lib/postgresql/data
    networks:
      - carekonet-keycloak-postgres

volumes:
  carekobooks-postgres-data:
  carekobooks-minio-data:
  carekobooks-redis-data:
  carekobooks-keycloak-realm-data:
  carekobooks-keycloak-postgres-data:

networks:
  carekonet-keycloak-postgres:
  carekonet-keycloak-app-postgres:
