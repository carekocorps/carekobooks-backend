services:
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: carekobooks-backend
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - minio
      - redis
      - keycloak
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      MINIO_OUTER_ENDPOINT: ${MINIO_OUTER_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_HOSTNAME:-http://keycloak:8080}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
    restart: unless-stopped
    networks:
      - carekonet-postgres
      - carekonet-minio
      - carekonet-redis
      - carekonet-keycloak

  postgres:
    image: postgres:17
    container_name: carekobooks-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: carekobooks
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - carekobooks-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - carekonet-postgres

  minio:
    image: minio/minio:latest
    container_name: carekobooks-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://minio:9000/minio/health/live; }
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid
        until isAlive; do sleep 1; done
        echo "MinIO is ready. Proceeding with setup..."
        mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
        mc mb myminio/${MINIO_BUCKET}/ --ignore-existing
        mc anonymous set public myminio/${MINIO_BUCKET}
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid
        while isAlive; do sleep 0.1; done
        exec minio $0 "$@"
      '
    command: server /data --console-address ":9001"
    volumes:
      - carekobooks-minio-data:/data
    restart: unless-stopped
    networks:
      - carekonet-minio

  redis:
    image: redis:8
    container_name: carekobooks-redis
    ports:
      - "6379:6379"
    volumes:
      - carekobooks-redis-data:/data
    restart: unless-stopped
    networks:
      - carekonet-redis

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.5
    container_name: carekobooks-keycloak
    depends_on:
      - keycloak-postgres
      - keycloak-realm-setup
    ports:
      - "8080:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/carekobooks-keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_HOSTNAME_STRICT: true
      KC_HTTP_ENABLED: true
      KC_PROXY: xforwarded
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-keycloak}
      KC_FEATURES: update-email
    command: start --import-realm
    volumes:
      - carekobooks-keycloak-realm-data:/opt/keycloak/data/import
    restart: unless-stopped
    networks:
      - carekonet-keycloak
      - carekonet-keycloak-postgres

  keycloak-realm-setup:
    build:
      context: docker/dropbox-downloader
      dockerfile: Dockerfile
    container_name: keycloak-realm-setup
    environment:
      DROPBOX_ACCESS_TOKEN: ${DROPBOX_ACCESS_TOKEN}
    entrypoint: >
      /bin/sh -c '
        readonly DATA_PATH="/app/data"
        readonly KEYCLOAK_REALM_PATH="$${DATA_PATH}/carekobooks-realm.json"
        readonly KEYCLOAK_USERS_PATH="$${DATA_PATH}/carekobooks-users-0.json"
        if [ ! -f "$${KEYCLOAK_REALM_PATH}" ] || [ ! -f "$${KEYCLOAK_USERS_PATH}" ]; then
          python main.py
        fi
      '
    volumes:
      - carekobooks-keycloak-realm-data:/app/data
    restart: no

  keycloak-postgres:
    image: postgres:17
    container_name: carekobooks-keycloak-postgres
    environment:
      POSTGRES_DB: carekobooks-keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - carekobooks-keycloak-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - carekonet-keycloak-postgres

volumes:
  carekobooks-postgres-data:
  carekobooks-minio-data:
  carekobooks-redis-data:
  carekobooks-keycloak-postgres-data:
  carekobooks-keycloak-realm-data:

networks:
  carekonet-postgres:
  carekonet-minio:
  carekonet-redis:
  carekonet-keycloak:
  carekonet-keycloak-postgres:
