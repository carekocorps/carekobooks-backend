services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: carekobooks-backend
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - minio
      - redis
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      MINIO_OUTER_ENDPOINT: ${MINIO_OUTER_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
    volumes:
      - carekobooks-backend-data:/app/.secrets/keys
    entrypoint: >
      /bin/sh -c '
        readonly OUTPUT_DIR="/app/.secrets/keys"
        readonly PRIVATE_KEY_PATH="$${OUTPUT_DIR}/app.key"
        readonly PUBLIC_KEY_PATH="$${OUTPUT_DIR}/app.pub"
        if [ ! -f "$${PRIVATE_KEY_PATH}" ] || [ ! -f "$${PUBLIC_KEY_PATH}" ]; then
          openssl genpkey -algorithm RSA -out "$${PRIVATE_KEY_PATH}" -pkeyopt rsa_keygen_bits:2048 &> /dev/null
          openssl rsa -pubout -in "$${PRIVATE_KEY_PATH}" -out "$${PUBLIC_KEY_PATH}" &> /dev/null
          echo "RSA Keys generated successfully in $${OUTPUT_DIR}"
        fi
        exec $0 "$@"
      '
    command: java -jar app.jar --spring.profiles.active=staging
    restart: unless-stopped
    networks:
      - carekonet

  postgres:
    image: postgres:latest
    container_name: carekobooks-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: carekobooks
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - carekobooks-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - carekonet

  minio:
    image: minio/minio:latest
    container_name: carekobooks-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - carekobooks-minio-data:/data
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://carekobooks-minio:9000/minio/health/live; }
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid
        until isAlive; do sleep 1; done
        echo "MinIO is ready. Proceeding with setup..."
        mc alias set myminio http://carekobooks-minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
        mc mb myminio/${MINIO_BUCKET}/ --ignore-existing
        mc anonymous set public myminio/${MINIO_BUCKET}
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid
        while isAlive; do sleep 0.1; done
        exec minio $0 "$@"
      '
    command: server /data
    restart: unless-stopped
    networks:
      - carekonet

  redis:
    image: redis:latest
    container_name: carekobooks-redis
    ports:
      - "6379:6379"
    volumes:
      - carekobooks-redis-data:/data
    restart: unless-stopped
    networks:
      - carekonet

volumes:
  carekobooks-backend-data:
  carekobooks-postgres-data:
  carekobooks-minio-data:
  carekobooks-redis-data:

networks:
  carekonet:
    driver: bridge
